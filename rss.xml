<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title></title>
      <link>https://mkflan.github.io</link>
      <description></description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://mkflan.github.io/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Sat, 09 Aug 2025 00:00:00 +0000</lastBuildDate>
      <item>
          <title>Developing my Blog Website</title>
          <pubDate>Sat, 09 Aug 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://mkflan.github.io/posts/developing-my-blog-website/</link>
          <guid>https://mkflan.github.io/posts/developing-my-blog-website/</guid>
          <description xml:base="https://mkflan.github.io/posts/developing-my-blog-website/">&lt;p&gt;I have always entertained the idea of creating a blog website, but I never followed through on it. After more recent thought, I realized how great of an idea it was: it helps me track my progress, reflect on projects, improve my writing and communication skills, and allows me to explain what I have learned to others which could help improve my own understanding.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;planning&quot;&gt;Planning&lt;&#x2F;h1&gt;
&lt;p&gt;My vision for the site was simple. I wanted a modern and minimalist user interface, and to be able to have my Markdown files transformed into HTML. I did not want to go overkill on what frameworks and libraries I would use as I wanted to keep everything simple; I only wanted to use what was absolutely necessary for my goals; if I found later on that I wanted something that the current setup could not fulfill, I could expand then.&lt;&#x2F;p&gt;
&lt;p&gt;I settled with a static site generator named &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;&lt;strong&gt;Zola&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. A &lt;strong&gt;static site generator (SSG)&lt;&#x2F;strong&gt; is software that builds websites (HTML and CSS) from, most frequently, Markdown files. This is exactly what I wanted! I could write my Markdown files, upload the Markdown file to the site, and have it rendered as an HTML page.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;styling-challenges&quot;&gt;Styling Challenges&lt;&#x2F;h1&gt;
&lt;p&gt;This project marked my first true endeavor into frontend web development, and my most extensive journey into CSS thus far. As a note, I only styled the website for large screen devices; I might style it for smaller viewports in the future.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-header&quot;&gt;The Header&lt;&#x2F;h2&gt;
&lt;p&gt;The header consists of a singular &lt;code&gt;&amp;lt;h1&amp;gt;&lt;&#x2F;code&gt; and a &lt;code&gt;&amp;lt;nav&amp;gt;&lt;&#x2F;code&gt; element containing navigation links as anchors (&lt;code&gt;&amp;lt;a&amp;gt;&lt;&#x2F;code&gt;); I wanted to place the former to the left and the latter to the right. The solution to this was the &lt;strong&gt;flexbox&lt;&#x2F;strong&gt; layout method; flexbox is used to arrange items in one-dimension in either rows or columns. An element becomes a &lt;strong&gt;flex container&lt;&#x2F;strong&gt; when its &lt;code&gt;display&lt;&#x2F;code&gt; property is set to &lt;code&gt;flex&lt;&#x2F;code&gt;, which sets its inner display type&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-1-1&quot;&gt;&lt;a href=&quot;#fn-1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; and makes children elements &lt;strong&gt;flex items&lt;&#x2F;strong&gt; that adhere to the flexbox specification&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-2-1&quot;&gt;&lt;a href=&quot;#fn-2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. Flex containers have a main axis along which flex items are laid out; its orientation is determined by the &lt;code&gt;flex-direction&lt;&#x2F;code&gt; property. By default, the main axis of a flex container is horizontal, positioning children in source order from left to right, which is what I wanted. The main axis starts at a point known as the &lt;strong&gt;main start&lt;&#x2F;strong&gt; and ends at a point known as the &lt;strong&gt;main end&lt;&#x2F;strong&gt;. The &lt;code&gt;justify-content&lt;&#x2F;code&gt; content property allows the developer to specify how flex items should be placed along the main axis. The &lt;code&gt;space-between&lt;&#x2F;code&gt; value was exactly what I was looking for: it evenly spaces items, in source code order, starting at the main start and ending at the main end. In my situation, this means that the left edge of the &lt;code&gt;h1&lt;&#x2F;code&gt;&#x27;s box would be at the main start and the right edge of &lt;code&gt;&amp;lt;nav&amp;gt;&lt;&#x2F;code&gt;&#x27;s box would be at the main end.&lt;&#x2F;p&gt;
&lt;p&gt;Now that the layout of the whole header was set, I turned my focus to the navigation section. The navigation anchors wrapped a singular &lt;code&gt;&amp;lt;h2&amp;gt;&lt;&#x2F;code&gt;. By default, the navigation anchors were stacked on top of each other; this was because &lt;code&gt;h2&lt;&#x2F;code&gt;&#x27;s default outer display type is &lt;code&gt;block&lt;&#x2F;code&gt;, which includes line breaks and overrides the behavior of anchor tags&#x27; default of &lt;code&gt;inline&lt;&#x2F;code&gt;. To solve this, I added a &lt;code&gt;display: inline-block&lt;&#x2F;code&gt; declaration in a &lt;code&gt;nav a&lt;&#x2F;code&gt; rule. &lt;code&gt;inline-block&lt;&#x2F;code&gt; acts as a compromise between &lt;code&gt;inline&lt;&#x2F;code&gt; and &lt;code&gt;block&lt;&#x2F;code&gt;: line breaks are not inserted and horizontal margins affect neighboring anchors.&lt;&#x2F;p&gt;
&lt;p&gt;My final challenge was making the header &quot;stick&quot; to the top of the page. To do this, I had to learn more about how elements are laid out in relation to one another. My preliminary exploration into the box model and the &lt;code&gt;display&lt;&#x2F;code&gt; property only explained how elements are laid out individually, in isolation. CSS has a &lt;code&gt;position&lt;&#x2F;code&gt;&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-3-1&quot;&gt;&lt;a href=&quot;#fn-3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; property, which allows you to escape the normal document flow and control how boxes are positioned in relation to other boxes. By default, every element has a &lt;code&gt;static&lt;&#x2F;code&gt; position, which puts them in their default positions in the normal document flow. Other options exist such as &lt;code&gt;relative&lt;&#x2F;code&gt;, which allows an element to be positioned relative to where it would normally be without affecting neighboring elements, and &lt;code&gt;fixed&lt;&#x2F;code&gt;, which keeps an element&#x27;s position the same; exact positioning can be controlled using the &lt;code&gt;top&lt;&#x2F;code&gt;, &lt;code&gt;bottom&lt;&#x2F;code&gt;, &lt;code&gt;left&lt;&#x2F;code&gt;, and &lt;code&gt;right&lt;&#x2F;code&gt; properties. For my scenario, the &lt;code&gt;sticky&lt;&#x2F;code&gt; position was the first part of the solution: &lt;code&gt;sticky&lt;&#x2F;code&gt; allows elements to act as if it were positioned relatively until a certain point where its position becomes fixed. I also had to add a &lt;code&gt;top: 0&lt;&#x2F;code&gt; declaration, which kept the header at the top of its block. To control the stacking of elements in relation to each other, I had to set the &lt;code&gt;z-index&lt;&#x2F;code&gt; property. Elements with a higher &lt;code&gt;z-index&lt;&#x2F;code&gt; overlay those with a lower one if both elements are in the same &lt;strong&gt;stacking context&lt;&#x2F;strong&gt;. Since &lt;code&gt;header&lt;&#x2F;code&gt; and &lt;code&gt;main&lt;&#x2F;code&gt; are in the same stacking context, I just had to set &lt;code&gt;header&lt;&#x2F;code&gt;&#x27;s &lt;code&gt;z-index&lt;&#x2F;code&gt; to a value higher than &lt;code&gt;main&lt;&#x2F;code&gt;&#x27;s (which was 0). Even after all of this, the main page content still overlapped with the header! I was stumped. It turns out that I had to set the &lt;code&gt;background-color&lt;&#x2F;code&gt; property of the &lt;code&gt;header&lt;&#x2F;code&gt; element. Wow, how simple. The background of all elements is transparent by default, so that explained why the content would visibly overlap. Setting &lt;code&gt;background-color&lt;&#x2F;code&gt; would make the background opaque. After setting &lt;code&gt;background-color&lt;&#x2F;code&gt; to the same color as the page, everything work as desired!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;laying-out-the-page-for-posts&quot;&gt;Laying out the page for posts&lt;&#x2F;h2&gt;
&lt;p&gt;Perhaps the most important part was properly laying out the page for a post. I knew that I wanted to just include the post content and a table of contents on the right side. Laying these out proved a greater challenge than I initially thought.&lt;&#x2F;p&gt;
&lt;p&gt;I split a post page into two &lt;code&gt;&amp;lt;div&amp;gt;&lt;&#x2F;code&gt;&#x27;s: one for the post content (class &lt;code&gt;content&lt;&#x2F;code&gt;) and one for the table of contents (class &lt;code&gt;toc&lt;&#x2F;code&gt;). I wanted the post content on the left and the table of contents on the right, with the content taking up a majority of the viewport width. I initially achieved the layout by making &lt;code&gt;&amp;lt;main&amp;gt;&lt;&#x2F;code&gt;, which was the parent of both of the divs, a flex container, but I found it challenging to fix the table of contents to the side of the viewport. The solution was to add a &lt;code&gt;display: inline-block&lt;&#x2F;code&gt; declaration for &lt;code&gt;.content&lt;&#x2F;code&gt; and &lt;code&gt;.toc&lt;&#x2F;code&gt;. But, I noticed that &lt;code&gt;.toc&lt;&#x2F;code&gt;&#x27;s box was going off of the viewport. This was happening because I gave &lt;code&gt;.content&lt;&#x2F;code&gt; left and right padding, which is not included in the actual dimensions of the box in the normal box model. The solution was using the alternative box model, &lt;code&gt;border-box&lt;&#x2F;code&gt;, which included padding in the actual dimensions of the box. This yielded the final rule of:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;.content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;.toc &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae6;&quot;&gt;display&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#f29668;&quot;&gt;inline-block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae6;&quot;&gt;box-sizing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#f29668;&quot;&gt;border-box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The next challenge was fixing &lt;code&gt;.toc&lt;&#x2F;code&gt; to the side of the screen. This was easy with my newfound knowledge of positioning: set its position to &lt;code&gt;fixed&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;maintaining-markdown-styling&quot;&gt;Maintaining Markdown styling&lt;&#x2F;h2&gt;
&lt;p&gt;Zola uses Markdown files as a foundation for generating HTML. Markdown is a very useful, portable, and versatile format, allowing various styling options such as italicizing, bolding, code blocks, etc. When testing how Zola reflected the Markdown styling in the generated HTML, I realized that the generated pages were not styled properly. Thus, I had to manually style them. To figure out what tags Zola used for these styles, I had to manually build the site and inspect the generated files. I found that Zola wrapped italicized text in &lt;code&gt;&amp;lt;em&amp;gt;&lt;&#x2F;code&gt; tags, bolded text in &lt;code&gt;&amp;lt;strong&amp;gt;&lt;&#x2F;code&gt; tags, and code blocks in &lt;code&gt;&amp;lt;code&amp;gt;&lt;&#x2F;code&gt; tags. To apply the styles, I inserted the following rules:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;strong &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae6;&quot;&gt;font-weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#f29668;&quot;&gt;bold&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;em &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae6;&quot;&gt;font-weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#f29668;&quot;&gt;italic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;code &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae6;&quot;&gt;background-color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#f29668;&quot;&gt;black&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For text wrapped in single backticks in Markdown, I wanted to style them with slightly rounded corners, and some left and right padding. Zola would wrap this text in a &lt;code&gt;&amp;lt;code&amp;gt;&lt;&#x2F;code&gt; tag. For text wrapped in triple backticks in Markdown, which is used for multi-line code blocks, Zola would also wrap it in a &lt;code&gt;&amp;lt;code&amp;gt;&lt;&#x2F;code&gt; tag wrapped in a &lt;code&gt;&amp;lt;pre&amp;gt;&lt;&#x2F;code&gt; tag. I did not want to give these &lt;code&gt;&amp;lt;code&amp;gt;&lt;&#x2F;code&gt; tags wrapped in a &lt;code&gt;&amp;lt;pre&amp;gt;&lt;&#x2F;code&gt; the left and right padding as it would mess with the alignment in the multi-line code blocks. To style only for &lt;code&gt;&amp;lt;code&amp;gt;&lt;&#x2F;code&gt; tags who were not direct children of &lt;code&gt;&amp;lt;pre&amp;gt;&lt;&#x2F;code&gt; tags, I leveraged CSS&#x27;s powerful selection capabilities&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-4-1&quot;&gt;&lt;a href=&quot;#fn-4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;:not(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;pre &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae6;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;px &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For some reason, Zola would generate HTML for multi-line code blocks that styled &lt;code&gt;&amp;lt;code&amp;gt;&lt;&#x2F;code&gt; with a black background, as you would expect, but would give &lt;code&gt;&amp;lt;pre&amp;gt;&lt;&#x2F;code&gt; tags a non-black background color via an inline style. Unfortunately, inline styles take precedence over those defined in external stylesheets (&lt;code&gt;.css&lt;&#x2F;code&gt; files). Luckily, CSS has a mechanism for indicating that a style should take priority in the cascade&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-5-1&quot;&gt;&lt;a href=&quot;#fn-5&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: the &lt;code&gt;!important&lt;&#x2F;code&gt; property. I just had to include this after I set the &lt;code&gt;background-color&lt;&#x2F;code&gt; property of &lt;code&gt;&amp;lt;pre&amp;gt;&lt;&#x2F;code&gt; tags:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;pre &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae6;&quot;&gt;background-color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#f29668;&quot;&gt;black &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;!important&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, I wanted to properly style footnotes. Zola would generate a &lt;code&gt;&amp;lt;footer&amp;gt;&lt;&#x2F;code&gt; tag with the class &lt;code&gt;footnotes&lt;&#x2F;code&gt; with an ordered list (&lt;code&gt;&amp;lt;ol&amp;gt;&lt;&#x2F;code&gt;) that contained the footnotes. By default, the font size was pretty large and links did not have underlines as I had globally set anchor tags (&lt;code&gt;&amp;lt;a&amp;gt;&lt;&#x2F;code&gt;) to have no underline. To alleviate this, I wrote the following rules:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;.footnotes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;ol li &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae6;&quot;&gt;font-size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;.footnotes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;ol li a &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae6;&quot;&gt;text-decoration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#f29668;&quot;&gt;underline&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I also realized that when I say used the table of contents to redirect to a section of the page, the heading would be covered by the header. Luckily, there is a special CSS property to deal with this: &lt;code&gt;scroll-padding-top&lt;&#x2F;code&gt;. I applied this property to the whole document:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span&gt;:root {
&lt;&#x2F;span&gt;&lt;span&gt;	scroll-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae6;&quot;&gt;padding-top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;150&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;minor-problems&quot;&gt;Minor Problems&lt;&#x2F;h2&gt;
&lt;p&gt;I wanted footnotes to contain backlinks to where they originated from. Zola&#x27;s &lt;code&gt;bottom_footnotes&lt;&#x2F;code&gt; config variable inserts these backlinks, generating anchored arrows. But, these arrows would not properly display on the webpage. All I had to do was ensure UTF-8 was being used for the HTML document, so I had to add: &lt;code&gt;&amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;&lt;&#x2F;code&gt; inside of the HTML &lt;code&gt;&amp;lt;head&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;deploying&quot;&gt;Deploying&lt;&#x2F;h1&gt;
&lt;p&gt;I decided to deploy using GitHub Pages. I just had to setup a simple Actions workflow which built the Zola site and put the build artifacts onto the &lt;code&gt;gh-pages&lt;&#x2F;code&gt; branch:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;push
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;Build and deploy site onto GitHub Pages
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;github.ref == &amp;#39;refs&#x2F;heads&#x2F;master&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;checkout
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;actions&#x2F;checkout@v4
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;build_and_deploy
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;shalzz&#x2F;zola-deploy-action@master
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;PAGES_BRANCH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;gh-pages
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;TOKEN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;${{ secrets.GITHUB_TOKEN }}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On the first run, the deployment failed because &lt;code&gt;GITHUB_TOKEN&lt;&#x2F;code&gt;, an auto generated access token, did not have write privileges to the repository. I just had to go to the repository&#x27;s &lt;strong&gt;settings &amp;gt; actions &amp;gt; general&lt;&#x2F;strong&gt; and check &lt;strong&gt;read and write permissions&lt;&#x2F;strong&gt; under &lt;strong&gt;workflow permissions&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;takeaways&quot;&gt;Takeaways&lt;&#x2F;h1&gt;
&lt;p&gt;Although simple, I am very proud about how this turned out. I have learned so much more about how CSS works, specifically how elements are laid out and what &quot;cascading&quot; (CSS stands for &lt;strong&gt;cascading style sheets&lt;&#x2F;strong&gt;) actually means in practice. Reading documentation and extracting applicable information is a skill all programmers need, and I have certainly improved that skill. I also found that I was trying to fit unnecessary things into the scope of the project just because I wanted to; in short, I realized the backend was unnecessary and redundant. Always keep things simple.&lt;&#x2F;p&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;The inner display type determines how children elements are laid out. Read more &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Learn_web_development&#x2F;Core&#x2F;Styling_basics&#x2F;Box_model&quot;&gt;here&lt;&#x2F;a&gt;. &lt;a href=&quot;#fr-1-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;css-tricks.com&#x2F;snippets&#x2F;css&#x2F;a-guide-to-flexbox&#x2F;&quot;&gt;This&lt;&#x2F;a&gt; is the best reference I have found for flexbox. The &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Learn_web_development&#x2F;Core&#x2F;CSS_layout&#x2F;Flexbox#the_flex_model&quot;&gt;MDN web docs page&lt;&#x2F;a&gt; is also great. &lt;a href=&quot;#fr-2-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-3&quot;&gt;
&lt;p&gt;Read more about positioning &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Learn_web_development&#x2F;Core&#x2F;CSS_layout&#x2F;Positioning&quot;&gt;here&lt;&#x2F;a&gt;. &lt;a href=&quot;#fr-3-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-4&quot;&gt;
&lt;p&gt;Read more about CSS selectors &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;CSS&#x2F;CSS_selectors&quot;&gt;here&lt;&#x2F;a&gt;. &lt;a href=&quot;#fr-4-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-5&quot;&gt;
&lt;p&gt;The cascade decides what styles take precedence when multiple are defined on an element. Read more &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;CSS&#x2F;CSS_cascade&#x2F;Cascade&quot;&gt;here&lt;&#x2F;a&gt;. &lt;a href=&quot;#fr-5-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;section&gt;
</description>
      </item>
    </channel>
</rss>
